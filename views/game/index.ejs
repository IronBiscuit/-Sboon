<h1 class="text-center mt-4">LIE || DIE</h1>
<p class="lead text-center mb-3">Say hi to your friends <%= name %>!</p>
<div>
    <canvas tabindex='1' id="ctx" width="750" height="500" style="border:1px solid #000000; float:left; transition: width .5s, height .5s, top .5s, left .5s;"></canvas>
    <button type = "button" class="playerButtons" style="position: absolute; left: 20%; top: 40%;">Vote</button>
    <button type = "button" class="playerButtons" style="position: absolute; left: 36.5%; top: 40%;">Vote</button>
    <button type = "button" class="playerButtons" style="position: absolute; left: 53%; top: 40%;">Vote</button>
    <button type = "button" class="playerButtons" style="position: absolute; left: 28.25%; top: 60%;">Vote</button>
    <button type = "button" class="playerButtons" style="position: absolute; left: 44.75%; top: 60%;">Vote</button>
</div>
<div id="chatbox" style="float:right; width:25%;">
    <div class="chat-sidebar">
        <h3><i class="fas fa-users"></i> Player's Chat</h3>
    </div>
        <div id = "chat-text" style="float:top; height:200px; overflow-y:auto; overflow-x:auto; "></div>
    <div class="chat-form-container">
    <form id="chat-form">
        <input
        id="chat-input"
        type="text"
        placeholder="Enter Message"
        required
        autocomplete="off"
        />
        <button type="submit" id="chat-form"><i class="fas fa-paper-plane"></i> Send</button>
    </form>
    </div>
    <a href="/dashboard" class="btn btn-secondary" style="margin-top: 10px;">Dashboard</a>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    var ctx = document.getElementById("ctx").getContext("2d");
    var ctxx = document.getElementById("ctx");
    var chatText = document.getElementById("chat-text");
    var chatForm = document.getElementById("chat-form");
    var chatInput = document.getElementById("chat-input");
    var playerName = "<%= name %>";
    console.log("hello");
    ctx.font = '30px lucida';
    var socket = io();
    var WIDTH = 750;
    var HEIGHT = 500;
    var tileSize = 16;
    

    //map img
    var selfId = null;
    var gameMap = function() {
        var self = {
            image: new Image(),
            width: 86,
            height: 81,
        }
        var nightGradient = 1;
        self.image.src = "/testMap.png";
        self.drawMap = function() {
            var x = WIDTH/2 - Player.list[selfId].x;
            var y = HEIGHT/2 - Player.list[selfId].y;
            ctx.drawImage(self.image, x, y);
            if (nightTime) {
                ctx.globalCompositionOperation = "source-atop";
                if (nightGradient >= 20 && nightGradient < 150) {
                    ctx.fillStyle = "rgba(20, 20, " + nightGradient + ", 0.5)";  
                    nightGradient = nightGradient + 1;
                } else if (nightGradient < 20) {
                    ctx.fillStyle = "rgba(" + nightGradient + ", " + nightGradient + ", " + nightGradient + ", 0.5)"; 
                    nightGradient = nightGradient + 1;
                } else {
                    ctx.fillStyle = "rgba(20, 20, 150, 0.5)"
                }
                ctx.fillRect(0, 0, 750, 500);
            } else if (!nightTime && nightGradient > 1) {
                ctx.globalCompositionOperation = "source-atop";
                if (nightGradient >= 20 && nightGradient <= 150) {
                    ctx.fillStyle = "rgba(20, 20, " + nightGradient + ", 0.5)";  
                    nightGradient = nightGradient - 1;
                } else if (nightGradient < 20) {
                    ctx.fillStyle = "rgba(" + nightGradient + ", " + nightGradient + ", " + nightGradient + ", 0.5)"; 
                    nightGradient = nightGradient - 1;
                } 
                ctx.fillRect(0, 0, 750, 500);
            }
        }
        return self;
    }

    var lobbyMap = function() {
        var self = {
            image: new Image(),
            width: 47,
            height: 32
        }
        self.image.src = "/lobbyMap.png";
        self.drawMap = function() {
            ctx.drawImage(self.image, 0, 0, 752, 512);
        }
        return self;
    }
    var currentMap = lobbyMap();
    //game 
    var Player = function(initPack) {
        var self = {};
        self.id = initPack.id;
        self.groupId = initPack.groupId;
        self.number = initPack.number;
        self.x = initPack.x;
        self.y = initPack.y;
        self.name = initPack.name;
        Player.list[self.id] = self;
        self.pressingRight = false;
        self.pressingLeft = false;
        self.pressingUp = false;
        self.pressingDown = false;
        self.img = new Image();
        self.img.src = "/player.png";
        self.mapDraw = function() {
            var x = self.x - Player.list[selfId].x + WIDTH/2;
            var y = self.y - Player.list[selfId].y + HEIGHT/2;
            var width = self.img.width * 2;
            var height = self.img.height * 2;
            ctx.drawImage(self.img, 0, 0, self.img.width, self.img.height, x-width/2, y-height/2, width, height);
        }
        self.reducedVision = function(opacity) {
            if (self.pressingDown) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(350, 250);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else if (self.pressingUp) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else if (self.pressingRight) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else if (self.pressingLeft) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(350, 250);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            }
        }
        self.setDirection = function(direction) {
            if (direction === 'right') {
                self.pressingRight = true;
                self.pressingLeft = false;
                self.pressingDown = false;
                self.pressingUp = false;
            } else if (direction === 'left') {
                self.pressingLeft = true;
                self.pressingRight = false;
                self.pressingDown = false;
                self.pressingUp = false;
            } else if (direction === 'up') {
                self.pressingUp = true;
                self.pressingRight = false;
                self.pressingLeft = false;
                self.pressingDown = false;
            } else if (direction === 'down') {
                self.pressingDown = true;
                self.pressingRight = false;
                self.pressingLeft = false;
                self.pressingUp = false;
            }
        }
        self.lobbyDraw = function() {
            var x = self.x;
            var y = self.y;
            var width = self.img * 2;
            var height = self.img * 2;
            ctx.drawImage(self.img, x, y, self.img.width * 2, self.img.height * 2);
        }
        self.Draw = function() {
            self.lobbyDraw();
        }
        self.updateDrawMethod = function() {
            self.Draw = function() {
                self.mapDraw();
            }
        }
        return self;
    }
    Player.list = [];
    
    socket.on('init', function(data) {
        if (data.selfId && selfId == null) {
            selfId = data.selfId;
        }
        for (var i = 0; i < data.player.length; i++) {
            new Player(data.player[i]);
        }
    })

    socket.on('update', function(data) {
        for (var i = 0; i < data.length; i++) {
            var pack = data[i];
            var p = Player.list[pack.id];
            if (p) {
                if (pack.x !== undefined) {
                    p.x = pack.x;
                }
                if (pack.y !== undefined) {
                    p.y = pack.y;
                }
            }
        }
    })

    socket.on('remove', function(data){
        for (var i = 0; i < data.player.length; i++) {
            delete Player.list[data.player[i].id];
        }
    })
    
    function setIntervalX(callback, delay, repetitions) {
        var x = 0;
        var intervalID = window.setInterval(function () {
        callback();
        if (++x === repetitions) {
            window.clearInterval(intervalID);
        }
        }, delay);
    }

    var countDown = 5;
    var gameStartCountdown = function() {
        const messageElement = document.createElement('div');
        messageElement.innerText = "Game starts in " + countDown;
        chatText.append(messageElement);
        chatText.scrollTop = chatText.scrollHeight;
        countDown = countDown - 1;
        if (countDown === 0) {
            loading = true;
            var intervalID = setInterval(function() {
                ctx.clearRect(0, 0, 750, 500);
                currentMap.drawMap();
                for (var i in Player.list) {
                    Player.list[i].Draw();
                }
                ctx.beginPath();
                ctx.rect(0, 0, 750, screenHeight);
                ctx.fillStyle = "black";
                ctx.fill();
                ctx.closePath();
                screenHeight = screenHeight + 10;
                if(screenHeight == 550) {
                    socket.emit('gameStarted');
                    currentMap = gameMap();
                    for (var i in Player.list) {
                        Player.list[i].updateDrawMethod();
                    } 
                    clearInterval(intervalID);       
                }
            }, 1000/65)
            return;
        }
    }
    socket.on('gameStart', function() {
        setIntervalX(function(){
            gameStartCountdown();
        }, 1000, 5);
    })

    var screenHeight = 0;
    var loading = false;
    socket.on('gameLoaded', function() {
        var canvasHeight = 550;
        var intervalID = setInterval(function() {
            ctx.clearRect(0, 0, 750, 500);
            currentMap.drawMap();
            for (var i in Player.list) {
                Player.list[i].Draw();
            }
            ctx.beginPath();
            ctx.rect(0, 0, 750, canvasHeight);
            ctx.fillStyle = "black";
            ctx.fill();
            console.log(canvasHeight);
            canvasHeight = canvasHeight - 10;
            if(canvasHeight === 0) {
                loading = false;
                clearInterval(intervalID); 
                setTimeout(function() {
                    nightTime = true;
                    var i = 5;
                    setIntervalX(function(){
                    const messageElement = document.createElement('div');
                    messageElement.innerText = "Night falls in " + i;
                    chatText.append(messageElement);
                    chatText.scrollTop = chatText.scrollHeight;
                    i = i - 1;
                    if (i === 0) {
                        setTimeout(function() {
                            var j = 5;
                            setIntervalX(function() {
                                nightTime = false;
                                const endMessage = document.createElement('div');
                                endMessage.innerText = "Night ends in " + j;
                                chatText.append(endMessage);
                                chatText.scrollTop = chatText.scrollHeight;
                                j = j - 1
                            }, 1000, 5)
                        }, 5000)
                    }
                    }, 1000, 5);
                    }, 5000)
            }
        }, 1000/65) 
    })

    var opac = 0;
    var nightTime = false;
    setInterval(function(){
        if (!selfId || loading) {
            return;
        }
        ctx.clearRect(0, 0, 750, 500);
        currentMap.drawMap();
        for (var i in Player.list) {
            Player.list[i].Draw();
        }
        if (nightTime) {
            Player.list[selfId].reducedVision(opac);
            if (opac < 1) {
                opac = opac + 0.004;
            }
        } else if (opac > 0 && !nightTime) {
            Player.list[selfId].reducedVision(opac);
            opac = opac - 0.004;
        }
    }, 1000/65);

    //Chat 
    
    socket.on('addToChat', function(data) {
        const messageElement = document.createElement('div');
        messageElement.innerText = data;
        chatText.append(messageElement);
        chatText.scrollTop = chatText.scrollHeight;
    })

    chatForm.onsubmit = function(e) {
        e.preventDefault();
        socket.emit('sendMsgToServer', {
            msg: chatInput.value,
            name: playerName,
            groupId: Player.list[selfId].groupId
        });
        chatInput.value = '';
    }
    ctxx.addEventListener('keydown', function(event) {
        event.preventDefault();
        if (event.keyCode === 68) { // right
            socket.emit('keyPress', {input: 'right', state: true});
            Player.list[selfId].setDirection('right');
        } else if (event.keyCode === 83) { // down
            Player.list[selfId].pressingDown = true;
            socket.emit('keyPress', {input: 'down', state: true});
            Player.list[selfId].setDirection('down');
        } else if (event.keyCode === 65) { // left
            Player.list[selfId].pressingLeft = true;
            socket.emit('keyPress', {input: 'left', state: true});
            Player.list[selfId].setDirection('left');
        } else if (event.keyCode === 87) { // up
            Player.list[selfId].pressingUp = true;
            socket.emit('keyPress', {input: 'up', state: true});
            Player.list[selfId].setDirection('up');
        } else if (event.keyCode === 32) {
            
        }
    }, false)
    
    ctxx.addEventListener('keyup', function(event) {
        event.preventDefault();
        if (event.keyCode === 68) { // right
            socket.emit('keyPress', {input: 'right', state: false});
        } else if (event.keyCode === 83) { // down
            socket.emit('keyPress', {input: 'down', state: false});
        } else if (event.keyCode === 65) { // left
            socket.emit('keyPress', {input: 'left', state: false});
        } else if (event.keyCode === 87) { // up
            socket.emit('keyPress', {input: 'up', state: false});
        } else {
           
        }
    }, false)
        
    
</script>
 

